#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
"""

from datetime import datetime
from typing import Dict, List, Optional, Union

# –ò–º–∏—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
_employees_db = [
    {"id": 1, "name": "–ò–≤–∞–Ω–æ–≤ –ò.–ò.", "position": "–ú–µ–Ω–µ–¥–∂–µ—Ä", "salary": 120000.0, "hire_date": "2023-01-15"},
    {"id": 2, "name": "–ü–µ—Ç—Ä–æ–≤ –ü.–ü.", "position": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "salary": 180000.0, "hire_date": "2023-02-20"},
    {"id": 3, "name": "–°–∏–¥–æ—Ä–æ–≤ –°.–°.", "position": "–ê–Ω–∞–ª–∏—Ç–∏–∫", "salary": 150000.0, "hire_date": "2023-03-10"}
]

_next_employee_id = 4


def get_employees() -> List[Dict]:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

    Returns:
        list: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    """
    print("üë• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print("   - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    print("   - –í—ã–±–æ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    print("   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö")

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(_employees_db)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    print(f"   –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {datetime.now().strftime('%H:%M:%S')}")

    return _employees_db.copy()


def get_employee_by_id(employee_id: int) -> Optional[Dict]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ ID

    Args:
        employee_id: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    Returns:
        dict –∏–ª–∏ None: –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    if not isinstance(employee_id, int):
        raise TypeError("ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")

    for employee in _employees_db:
        if employee['id'] == employee_id:
            print(f"üîç –ù–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee['name']}")
            return employee.copy()

    print(f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {employee_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return None


def add_employee(name: str, position: str, salary: float = 100000.0) -> Dict:
    """
    –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    Args:
        name: –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        position: –î–æ–ª–∂–Ω–æ—Å—Ç—å
        salary: –ó–∞—Ä–ø–ª–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100000)

    Returns:
        dict: –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    Raises:
        ValueError: –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    global _next_employee_id

    if not isinstance(name, str) or not name.strip():
        raise ValueError("–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")

    if not isinstance(position, str) or not position.strip():
        raise ValueError("–î–æ–ª–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")

    if not isinstance(salary, (int, float)) or salary <= 0:
        raise ValueError("–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")

    new_employee = {
        'id': _next_employee_id,
        'name': name.strip(),
        'position': position.strip(),
        'salary': float(salary),
        'hire_date': datetime.now().strftime('%Y-%m-%d')
    }

    _employees_db.append(new_employee)
    _next_employee_id += 1

    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {name} - {position}")
    return new_employee.copy()


def remove_employee(employee_id: int) -> bool:
    """
    –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ ID

    Args:
        employee_id: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª–µ–Ω, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω

    Raises:
        TypeError: –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ç–∏–ø–µ ID
    """
    if not isinstance(employee_id, int):
        raise TypeError("ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")

    for i, employee in enumerate(_employees_db):
        if employee['id'] == employee_id:
            removed_employee = _employees_db.pop(i)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {removed_employee['name']}")
            return True

    print(f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {employee_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    return False


def update_employee_data(employee_id: int, **kwargs) -> Optional[Dict]:
    """
    –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    Args:
        employee_id: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        **kwargs: –ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

    Returns:
        dict –∏–ª–∏ None: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    if not isinstance(employee_id, int):
        raise TypeError("ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")

    for employee in _employees_db:
        if employee['id'] == employee_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
            allowed_fields = ['name', 'position', 'salary']
            updated_fields = []

            for field, value in kwargs.items():
                if field in allowed_fields:
                    if field == 'name' and (not isinstance(value, str) or not value.strip()):
                        raise ValueError("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")
                    if field == 'position' and (not isinstance(value, str) or not value.strip()):
                        raise ValueError("–î–æ–ª–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")
                    if field == 'salary' and (not isinstance(value, (int, float)) or value <= 0):
                        raise ValueError("–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")

                    employee[field] = value
                    updated_fields.append(field)

            if updated_fields:
                print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—è {updated_fields} –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee['name']}")
                return employee.copy()
            else:
                print("‚ùå –ù–µ—Ç –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return employee.copy()

    print(f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {employee_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return None


def get_employees_by_position(position: str) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏

    Args:
        position: –î–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞

    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é
    """
    if not isinstance(position, str):
        raise TypeError("–î–æ–ª–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")

    filtered_employees = [
        emp.copy() for emp in _employees_db
        if emp['position'].lower() == position.lower()
    ]

    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(filtered_employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é '{position}'")
    return filtered_employees


def get_employees_count() -> int:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ
    """
    return len(_employees_db)


def clear_employees_db() -> None:
    """
    –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    """
    global _employees_db, _next_employee_id
    _employees_db.clear()
    _next_employee_id = 1
    print("üßπ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—á–∏—â–µ–Ω–∞")


def reset_employees_db() -> None:
    """
    –°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    """
    global _employees_db, _next_employee_id
    _employees_db = [
        {"id": 1, "name": "–ò–≤–∞–Ω–æ–≤ –ò.–ò.", "position": "–ú–µ–Ω–µ–¥–∂–µ—Ä", "salary": 120000.0, "hire_date": "2023-01-15"},
        {"id": 2, "name": "–ü–µ—Ç—Ä–æ–≤ –ü.–ü.", "position": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "salary": 180000.0, "hire_date": "2023-02-20"},
        {"id": 3, "name": "–°–∏–¥–æ—Ä–æ–≤ –°.–°.", "position": "–ê–Ω–∞–ª–∏—Ç–∏–∫", "salary": 150000.0, "hire_date": "2023-03-10"}
    ]
    _next_employee_id = 4
    print("üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–±—Ä–æ—à–µ–Ω–∞ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é")