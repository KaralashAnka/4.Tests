#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
"""

from datetime import datetime
from typing import Dict, List, Optional, Union


def calculate_salary(employees: Optional[List[Dict]] = None) -> Dict:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

    Args:
        employees: –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
    """
    if employees is None:
        from application.db.people import get_employees
        employees = get_employees()

    calculation_date = datetime.now().strftime('%d.%m.%Y')

    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã
    total_salary = 0
    salary_details = []

    for employee in employees:
        base_salary = employee.get('salary', 100000)  # –ë–∞–∑–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
        bonus = base_salary * 0.1  # 10% –ø—Ä–µ–º–∏—è
        total = base_salary + bonus

        salary_details.append({
            'employee_id': employee['id'],
            'name': employee['name'],
            'base_salary': base_salary,
            'bonus': bonus,
            'total': total
        })

        total_salary += total

    result = {
        'calculation_date': calculation_date,
        'total_employees': len(employees),
        'salary_details': salary_details,
        'total_salary': total_salary,
        'average_salary': total_salary / len(employees) if employees else 0,
        'status': 'calculated'
    }

    print("üßÆ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã...")
    print("   - –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–∑–æ–≤—ã—Ö –æ–∫–ª–∞–¥–æ–≤")
    print("   - –†–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–π –∏ –Ω–∞–¥–±–∞–≤–æ–∫")
    print("   - –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤ –∏ —É–¥–µ—Ä–∂–∞–Ω–∏–π")
    print(f"   - –î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞: {calculation_date}")
    print("‚úÖ –†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω!")

    return result


def calculate_individual_salary(base_salary: float, bonus_percent: float = 0.0) -> Dict:
    """
    –†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    Args:
        base_salary: –ë–∞–∑–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
        bonus_percent: –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–µ–º–∏–∏

    Returns:
        dict: –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
    """
    if not isinstance(base_salary, (int, float)) or base_salary <= 0:
        raise ValueError("–ë–∞–∑–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")

    if not isinstance(bonus_percent, (int, float)) or bonus_percent < 0:
        raise ValueError("–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–µ–º–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")

    bonus = base_salary * (bonus_percent / 100)
    total = base_salary + bonus

    return {
        'base_salary': base_salary,
        'bonus_percent': bonus_percent,
        'bonus_amount': bonus,
        'total_salary': total
    }


def calculate_taxes(gross_salary: float) -> Dict:
    """
    –†–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤ —Å –∑–∞—Ä–ø–ª–∞—Ç—ã

    Args:
        gross_salary: –í–∞–ª–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞

    Returns:
        dict: –î–µ—Ç–∞–ª–∏ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è
    """
    if not isinstance(gross_salary, (int, float)) or gross_salary < 0:
        raise ValueError("–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")

    income_tax_rate = 0.13  # 13% –ø–æ–¥–æ—Ö–æ–¥–Ω—ã–π –Ω–∞–ª–æ–≥
    social_tax_rate = 0.22  # 22% —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–∑–Ω–æ—Å—ã

    income_tax = gross_salary * income_tax_rate
    social_tax = gross_salary * social_tax_rate
    net_salary = gross_salary - income_tax
    total_taxes = income_tax + social_tax

    return {
        'gross_salary': gross_salary,
        'income_tax': income_tax,
        'social_tax': social_tax,
        'net_salary': net_salary,
        'total_taxes': total_taxes,
        'tax_rate': income_tax_rate
    }


def get_salary_report(format_type: str = 'summary') -> Dict:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ

    Args:
        format_type: –¢–∏–ø –æ—Ç—á–µ—Ç–∞ ('summary', 'detailed', 'csv')

    Returns:
        dict: –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
    """
    valid_formats = ['summary', 'detailed', 'csv']
    if format_type not in valid_formats:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞. –î–æ—Å—Ç—É–ø–Ω—ã: {valid_formats}")

    report_data = {
        'report_date': datetime.now().strftime('%Y-%m-%d'),
        'format': format_type,
        'status': 'generated',
        'report_id': f"SAL_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    }

    if format_type == 'detailed':
        report_data['includes'] = ['employee_details', 'tax_breakdown', 'bonus_calculation']
    elif format_type == 'summary':
        report_data['includes'] = ['total_amount', 'employee_count']

    print("üìä –û—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    return report_data


def validate_salary_data(salary_data: Dict) -> tuple:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—Ä–ø–ª–∞—Ç—ã

    Args:
        salary_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

    Returns:
        tuple: (is_valid: bool, message: str)
    """
    if not isinstance(salary_data, dict):
        return False, "–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"

    required_fields = ['base_salary', 'total_salary']
    for field in required_fields:
        if field not in salary_data:
            return False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}"

    if salary_data['base_salary'] <= 0:
        return False, "–ë–∞–∑–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"

    if salary_data['total_salary'] < salary_data['base_salary']:
        return False, "–û–±—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –±–∞–∑–æ–≤–æ–π"

    return True, "–î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"