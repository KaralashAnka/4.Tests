#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
"""

import sys
import os
import subprocess
import time
from datetime import datetime


def print_header(title):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    print("\n" + "=" * 60)
    print(f"üéØ {title}")
    print("=" * 60)


def print_section(title):
    """–ü–µ—á–∞—Ç—å —Å–µ–∫—Ü–∏–∏"""
    print(f"\nüìã {title}")
    print("-" * 40)


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")

    required_modules = [
        'unittest', 'requests', 'selenium', 'webdriver_manager'
    ]

    missing_modules = []

    for module in required_modules:
        try:
            __import__(module)
            print(f"‚úÖ {module}")
        except ImportError:
            print(f"‚ùå {module} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
            missing_modules.append(module)

    if missing_modules:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏: {', '.join(missing_modules)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements_tests.txt")
        return False

    print("\n‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True


def run_unit_tests():
    """–ó–∞–ø—É—Å–∫ unit-—Ç–µ—Å—Ç–æ–≤ –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏"""
    print_header("–ó–ê–î–ê–ù–ò–ï 1: Unit-—Ç–µ—Å—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è'")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏
        result = subprocess.run([
            sys.executable, 'test_accounting.py'
        ], capture_output=True, text=True, timeout=60, encoding='utf-8', errors='replace')

        print("üì§ –í–´–í–û–î –¢–ï–°–¢–û–í:")
        if result.stdout:
            print(result.stdout)
        else:
            print("(–ù–µ—Ç –≤—ã–≤–æ–¥–∞)")

        if result.stderr:
            print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø/–û–®–ò–ë–ö–ò:")
            print(result.stderr)

        if result.returncode == 0:
            print("‚úÖ Unit-—Ç–µ—Å—Ç—ã –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print(f"‚ùå Unit-—Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –∫–æ–¥–æ–º {result.returncode}")
            return False

    except subprocess.TimeoutExpired:
        print("‚è∞ –¢–µ—Å—Ç—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (60 —Å–µ–∫)")
        return False
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ unit-—Ç–µ—Å—Ç–æ–≤: {e}")
        return False


def run_api_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞"""
    print_header("–ó–ê–î–ê–ù–ò–ï 2: –¢–µ—Å—Ç—ã API –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º API —Ç–µ—Å—Ç—ã
        result = subprocess.run([
            sys.executable, 'test_yandex_disk_api.py'
        ], capture_output=True, text=True, timeout=60, encoding='utf-8', errors='replace')

        print("üì§ –í–´–í–û–î API –¢–ï–°–¢–û–í:")
        if result.stdout:
            print(result.stdout)
        else:
            print("(–ù–µ—Ç –≤—ã–≤–æ–¥–∞)")

        if result.stderr:
            print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø/–û–®–ò–ë–ö–ò:")
            print(result.stderr)

        if result.returncode == 0:
            print("‚úÖ API —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print(f"‚ùå API —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –∫–æ–¥–æ–º {result.returncode}")
            return False

    except subprocess.TimeoutExpired:
        print("‚è∞ API —Ç–µ—Å—Ç—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (60 —Å–µ–∫)")
        return False
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ API —Ç–µ—Å—Ç–æ–≤: {e}")
        return False


def run_selenium_tests():
    """–ó–∞–ø—É—Å–∫ Selenium —Ç–µ—Å—Ç–æ–≤"""
    print_header("–ó–ê–î–ê–ù–ò–ï 3: Selenium —Ç–µ—Å—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ø–Ω–¥–µ–∫—Å–∞")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Selenium —Ç–µ—Å—Ç—ã
        result = subprocess.run([
            sys.executable, 'test_yandex_selenium.py'
        ], capture_output=True, text=True, timeout=120, encoding='utf-8', errors='replace')

        print("üì§ –í–´–í–û–î SELENIUM –¢–ï–°–¢–û–í:")
        if result.stdout:
            print(result.stdout)
        else:
            print("(–ù–µ—Ç –≤—ã–≤–æ–¥–∞)")

        if result.stderr:
            print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø/–û–®–ò–ë–ö–ò:")
            print(result.stderr)

        if result.returncode == 0:
            print("‚úÖ Selenium —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print(f"‚ùå Selenium —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –∫–æ–¥–æ–º {result.returncode}")
            return False

    except subprocess.TimeoutExpired:
        print("‚è∞ Selenium —Ç–µ—Å—Ç—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (120 —Å–µ–∫)")
        return False
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Selenium —Ç–µ—Å—Ç–æ–≤: {e}")
        return False


def check_test_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤")

    required_files = [
        'test_accounting.py',
        'test_yandex_disk_api.py',
        'test_yandex_selenium.py',
        'main.py',
        'application/salary.py',
        'application/db/people.py'
    ]

    missing_files = []

    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")
            missing_files.append(file_path)

    if missing_files:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False

    print("\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Ç–µ—Å—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω—ã")
    return True


def show_environment_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
    print_section("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

    print(f"üêç Python: {sys.version}")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    env_vars = [
        'YANDEX_DISK_TOKEN',
        'YANDEX_TEST_LOGIN',
        'YANDEX_TEST_PASSWORD'
    ]

    print("\nüîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:")
    for var in env_vars:
        value = os.environ.get(var)
        if value:
            print(f"‚úÖ {var}: ***—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞***")
        else:
            print(f"‚ö™ {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


def generate_test_report(results):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    print_header("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")

    total_tests = len(results)
    passed_tests = sum(1 for result in results.values() if result)
    failed_tests = total_tests - passed_tests

    print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ –Ω–∞–±–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   ‚úÖ –ü—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ: {passed_tests}")
    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: {failed_tests}")
    print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests / total_tests) * 100:.1f}%")

    print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ò–õ–°–Ø"
        print(f"   {test_name}: {status}")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    if failed_tests == 0:
        print("   üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("   üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é.")
    else:
        print("   üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã")
        print("   üìñ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        if not results.get('API —Ç–µ—Å—Ç—ã', True):
            print("   üîë –î–ª—è API —Ç–µ—Å—Ç–æ–≤ –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞")
        if not results.get('Selenium —Ç–µ—Å—Ç—ã', True):
            print("   üåê –î–ª—è Selenium —Ç–µ—Å—Ç–æ–≤ –Ω—É–∂–µ–Ω Chrome –±—Ä–∞—É–∑–µ—Ä")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í –î–û–ú–ê–®–ù–ï–ì–û –ó–ê–î–ê–ù–ò–Ø")
    print("–õ–µ–∫—Ü–∏—è 4: ¬´Tests¬ª")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    show_environment_info()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    if not check_test_files():
        print("\n‚ùå –ù–µ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        print("\n‚ùå –ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    start_time = time.time()
    results = {}

    # 1. Unit-—Ç–µ—Å—Ç—ã –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏
    results['Unit-—Ç–µ—Å—Ç—ã –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏'] = run_unit_tests()

    # 2. API —Ç–µ—Å—Ç—ã –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
    results['API —Ç–µ—Å—Ç—ã'] = run_api_tests()

    # 3. Selenium —Ç–µ—Å—Ç—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    results['Selenium —Ç–µ—Å—Ç—ã'] = run_selenium_tests()

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    end_time = time.time()
    execution_time = end_time - start_time

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    generate_test_report(results)

    print(f"\n‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üïê –ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")


if __name__ == '__main__':
    main()