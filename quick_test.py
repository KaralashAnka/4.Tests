#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import sys
import os


def test_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        import main
        print("‚úÖ main.py")

        from application import salary
        print("‚úÖ application.salary")

        from application.db import people
        print("‚úÖ application.db.people")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏
        import test_accounting
        print("‚úÖ test_accounting.py")

        import test_yandex_disk_api
        print("‚úÖ test_yandex_disk_api.py")

        import test_yandex_selenium
        print("‚úÖ test_yandex_selenium.py")

        print("\nüéâ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫!")
        return True

    except SyntaxError as e:
        print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def test_basic_functions():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")

    try:
        from main import get_program_info, validate_employee_data
        from application.salary import calculate_individual_salary
        from application.db.people import get_employees_count, add_employee

        # –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        info = get_program_info()
        assert isinstance(info, dict)
        print("‚úÖ get_program_info —Ä–∞–±–æ—Ç–∞–µ—Ç")

        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        is_valid, msg = validate_employee_data({'id': 1, 'name': '–¢–µ—Å—Ç', 'position': '–¢–µ—Å—Ç–µ—Ä'})
        assert is_valid
        print("‚úÖ validate_employee_data —Ä–∞–±–æ—Ç–∞–µ—Ç")

        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
        salary = calculate_individual_salary(100000, 10)
        assert salary['total_salary'] == 110000
        print("‚úÖ calculate_individual_salary —Ä–∞–±–æ—Ç–∞–µ—Ç")

        # –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        count = get_employees_count()
        assert isinstance(count, int)
        print("‚úÖ get_employees_count —Ä–∞–±–æ—Ç–∞–µ—Ç")

        print("\nüéâ –í—Å–µ –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö: {e}")
        return False


def test_api_class():
    """–¢–µ—Å—Ç API –∫–ª–∞—Å—Å–∞"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª–∞—Å—Å–∞...")

    try:
        from test_yandex_disk_api import YandexDiskAPI

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
        api = YandexDiskAPI("test_token")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        assert api.token == "test_token"
        assert "cloud-api.yandex.net" in api.base_url
        assert "OAuth test_token" in api.headers['Authorization']

        print("‚úÖ YandexDiskAPI –∫–ª–∞—Å—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("\nüéâ API –∫–ª–∞—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ API –∫–ª–∞—Å—Å–µ: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("‚ö° –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("=" * 40)

    results = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    results.append(test_imports())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    results.append(test_basic_functions())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    results.append(test_api_class())

    # –ò—Ç–æ–≥–∏
    passed = sum(results)
    total = len(results)

    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"‚úÖ –ü—Ä–æ—à–ª–æ: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: {total - passed}/{total}")

    if passed == total:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã.")
    else:
        print("\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´. –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.")

    return passed == total


if __name__ == '__main__':
    main()